/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var index = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,9],$V2=[1,11],$V3=[1,12],$V4=[6,8,10,15,16],$V5=[6,10,15,16],$V6=[1,32],$V7=[1,28],$V8=[1,39],$V9=[1,40],$Va=[1,41],$Vb=[1,42],$Vc=[1,43],$Vd=[1,44],$Ve=[1,45],$Vf=[1,46],$Vg=[1,34],$Vh=[1,49],$Vi=[9,15,21,51,52,53,54,55,56,57,58,60],$Vj=[1,56],$Vk=[2,64],$Vl=[1,60],$Vm=[1,64],$Vn=[1,67],$Vo=[9,30,111],$Vp=[1,84],$Vq=[1,90],$Vr=[1,91],$Vs=[1,102],$Vt=[1,92],$Vu=[1,93],$Vv=[1,94],$Vw=[1,111],$Vx=[1,105],$Vy=[1,106],$Vz=[1,107],$VA=[1,108],$VB=[1,109],$VC=[1,110],$VD=[30,36],$VE=[2,37],$VF=[1,115],$VG=[9,10,21,30,36,42,85,86,88,89,90,92,94,105,111,112],$VH=[1,127],$VI=[1,139],$VJ=[1,138],$VK=[1,129],$VL=[1,132],$VM=[1,133],$VN=[1,131],$VO=[1,130],$VP=[1,136],$VQ=[1,143],$VR=[10,36],$VS=[10,30,36,42],$VT=[2,45],$VU=[1,146],$VV=[10,21,30,36,85,86,88,89,90,92,94,105,112],$VW=[2,138],$VX=[1,158],$VY=[9,10,19,21,28,33,35,51,52,53,54,55,56,57,58,74,75,76,109,113,114,115,116,117,118],$VZ=[1,160],$V_=[10,21,28,30,36,42,85,86,88,89,90,92,94,105,106,112],$V$=[2,151],$V01=[1,171],$V11=[2,98],$V21=[1,169],$V31=[1,170],$V41=[2,141],$V51=[2,142],$V61=[1,172],$V71=[1,176],$V81=[10,21,30,36,112],$V91=[10,21,30,36,85,86,112],$Va1=[1,181],$Vb1=[1,182],$Vc1=[1,183],$Vd1=[10,21,30,36,85,86,88,89,90,112],$Ve1=[10,21,30,36,85,86,88,89,90,92,94,112],$Vf1=[2,127],$Vg1=[9,28,33,35,85,86,92,94,99,109,113,114,115,116,117,118],$Vh1=[1,201],$Vi1=[10,21,36],$Vj1=[1,232],$Vk1=[10,21,30,36,42,85,86,88,89,90,92,94,105,112],$Vl1=[9,10,15,19,21,28,33,35,51,52,53,54,55,56,57,58,60,74,75,76,109,113,114,115,116,117,118],$Vm1=[21,36];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"import_decrs":4,"type_decrs":5,"EOF":6,"import_decr":7,"import":8,"identifier":9,"terminator":10,"type_decr":11,"class_decr":12,"class_header":13,"class_body":14,"public":15,"class":16,"extend_decr":17,"extends":18,"set_start":19,"class_body_decrs":20,"set_end":21,"class_body_decr":22,"class_member_decr":23,"consr_declarator":24,"consr_body":25,"field_decr":26,"method_decr":27,"paranthesis_start":28,"formal_parameter_list":29,"paranthesis_end":30,"explicit_consr_invocation":31,"block_stmts":32,"this":33,"argument_list":34,"super":35,"separator":36,"formal_parameter":37,"type":38,"var_declarator_id":39,"var_declarators":40,"var_declarator":41,"op_assign":42,"var_init":43,"expr":44,"array_init":45,"var_inits":46,"primitive_type":47,"reference_type":48,"integral_type":49,"floating_type":50,"boolean":51,"byte":52,"short":53,"int":54,"long":55,"char":56,"float":57,"double":58,"dim_exprs":59,"void":60,"method_declarator":61,"method_body":62,"block":63,"block_scope_start":64,"block_stmt":65,"stmt":66,"stmt_wots":67,"stmt_nsi":68,"break_stmt":69,"continue_stmt":70,"return_stmt":71,"stmt_expr":72,"stmt_expr_list":73,"break":74,"continue":75,"return":76,"additive_expr":77,"assignment":78,"left_hand_side":79,"assignment_operator":80,"expr_name":81,"field_access":82,"array_access":83,"multiplicative_expr":84,"op_add":85,"op_sub":86,"unary_expr":87,"op_mul":88,"op_div":89,"op_mod":90,"predec_expr":91,"op_decrement":92,"preinc_expr":93,"op_increment":94,"sign":95,"unary_expr_npm":96,"postfix_expr":97,"post_expr":98,"op_not":99,"cast_expr":100,"postdec_expr":101,"postinc_expr":102,"primary":103,"method_invocation":104,"field_invoker":105,"colon":106,"literal":107,"class_instance_creation_expr":108,"new":109,"dim_expr":110,"brackets_start":111,"brackets_end":112,"integer_literal":113,"float_literal":114,"boolean_literal":115,"character_literal":116,"string_literal":117,"null_literal":118,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"import",9:"identifier",10:"terminator",15:"public",16:"class",18:"extends",19:"set_start",21:"set_end",28:"paranthesis_start",30:"paranthesis_end",33:"this",35:"super",36:"separator",42:"op_assign",51:"boolean",52:"byte",53:"short",54:"int",55:"long",56:"char",57:"float",58:"double",60:"void",74:"break",75:"continue",76:"return",85:"op_add",86:"op_sub",88:"op_mul",89:"op_div",90:"op_mod",92:"op_decrement",94:"op_increment",99:"op_not",105:"field_invoker",106:"colon",109:"new",111:"brackets_start",112:"brackets_end",113:"integer_literal",114:"float_literal",115:"boolean_literal",116:"character_literal",117:"string_literal",118:"null_literal"},
productions_: [0,[3,3],[3,2],[3,2],[3,1],[4,1],[4,2],[7,3],[5,2],[5,1],[11,1],[11,1],[12,2],[13,4],[13,3],[13,3],[13,2],[17,2],[14,3],[20,2],[20,1],[22,1],[22,3],[22,2],[23,1],[23,1],[24,4],[25,4],[25,3],[25,3],[25,2],[31,4],[31,4],[31,3],[31,3],[29,3],[29,1],[29,0],[37,2],[26,4],[26,3],[40,3],[40,1],[41,1],[41,3],[39,1],[43,1],[43,1],[45,4],[45,3],[46,3],[46,1],[38,1],[38,1],[47,1],[47,1],[47,1],[49,1],[49,1],[49,1],[49,1],[49,1],[50,1],[50,1],[48,1],[48,2],[48,2],[27,4],[27,4],[27,3],[27,3],[61,4],[62,1],[63,4],[63,3],[64,0],[32,2],[32,1],[65,3],[65,1],[66,1],[68,1],[67,1],[67,1],[67,1],[67,1],[67,2],[67,1],[73,3],[73,1],[69,2],[70,2],[71,3],[71,2],[44,1],[44,1],[72,1],[78,3],[79,1],[79,1],[79,1],[80,1],[77,1],[77,3],[77,3],[84,1],[84,3],[84,3],[84,3],[91,2],[93,2],[87,1],[87,1],[87,2],[87,1],[96,1],[96,1],[96,2],[96,1],[100,4],[101,2],[101,2],[102,2],[102,2],[98,1],[98,1],[97,1],[97,1],[104,4],[104,3],[104,6],[104,6],[104,5],[104,5],[82,3],[82,3],[83,3],[103,1],[103,1],[103,3],[103,1],[103,1],[103,1],[103,1],[108,5],[108,4],[34,1],[34,3],[59,2],[59,1],[110,3],[81,1],[81,3],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[95,1],[95,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			return $$[$0-2].code.concat($$[$0-1].code)
		
break;
case 2: case 3:

			return $$[$0-1].code
		
break;
case 4:

			return []
		
break;
case 5:

			this.$ = { code: [$$[$0].code], place: null }
		
break;
case 6:

			this.$ = $$[$0-1]
			this.$.code.push($$[$0].code)
		
break;
case 7:

			this.$ = { code: "import" + ir_sep + $$[$0-1], place: null }
		
break;
case 8: case 12: case 19:

			this.$ = $$[$0-1]
			this.$.code = this.$.code.concat($$[$0].code)
		
break;
case 9: case 10: case 17: case 20: case 21: case 24: case 25: case 45: case 46: case 47: case 53: case 54: case 55: case 72: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 94: case 95: case 96: case 98: case 99: case 100: case 102: case 105: case 111: case 112: case 114: case 115: case 116: case 118: case 124: case 125: case 126: case 127: case 137: case 140: case 141: case 142: case 143:

			this.$ = $$[$0]
		
break;
case 11: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 87:

			this.$ = { code: [], place: null }
		
break;
case 13: case 14:

			ST.add_class($$[$0-1], $$[$0])
			this.$ = {
				code: ["class" + ir_sep + $$[$0-1] + ir_sep + "extends" + ir_sep + $$[$0]],
				place: null
			}
		
break;
case 15: case 16:

			ST.add_class($$[$0], "")
			this.$ = {
				code: ["class" + ir_sep + $$[$0]],
				place: null
			}
		
break;
case 18: case 49: case 86: case 139: case 150:

			this.$ = $$[$0-1]
		
break;
case 22:
 this.$ = { nt: 'class_body_decr', children: [{ t: 'public', l: $$[$0-2] },$$[$0-1],$$[$0]] } 
break;
case 23:
 this.$ = { nt: 'class_body_decr', children: [$$[$0-1],$$[$0]] } 
break;
case 35: case 41: case 50: case 88: case 147:

			this.$ = $$[$0-2]
			this.$.push($$[$0])
		
break;
case 36: case 42: case 51: case 77: case 89: case 146: case 149:

			this.$ = [$$[$0]]
		
break;
case 37:

			this.$ = []
		
break;
case 38:

			this.$ = new Variable($$[$0], $$[$0-1])
		
break;
case 39: case 40: case 78:

			this.$ = utils.init({
				type: $$[$0-2],
				var_declarators: $$[$0-1]
			})
		
break;
case 43:

			this.$ = { identifier: $$[$0], init: null }
		
break;
case 44:

			this.$ = { identifier: $$[$0-2], init: $$[$0] }
		
break;
case 48:

			this.$ = $$[$0-2]
		
break;
case 52:

			this.$ = new Type($$[$0].type, $$[$0].category, $$[$0].width, $$[$0].length, $$[$0].dimension)
		
break;
case 56:

			this.$ = {
				type: "boolean",
				category: "basic",
				width: 1,
				length: null,
				dimension: 0
			}
		
break;
case 57:

			this.$ = {
				type: "byte",
				category: "basic",
				width: 1,
				length: null,
				dimension: 0
			}
		
break;
case 58:

			this.$ = {
				type: "short",
				category: "basic",
				width: 2,
				length: null,
				dimension: 0
			}
		
break;
case 59:

			this.$ = {
				type: "int",
				category: "basic",
				width: 4,
				length: null,
				dimension: 0
			}
		
break;
case 60:

			this.$ = {
				type: "long",
				category: "basic",
				width: 8,
				length: null,
				dimension: 0
			}
		
break;
case 61:

			this.$ = {
				type: "char",
				category: "basic",
				width: 1,
				length: null,
				dimension: 0
			}
		
break;
case 62:

			this.$ = {
				type: "float",
				category: "basic",
				width: 4,
				length: null,
				dimension: 0
			}
		
break;
case 63:

			this.$ = {
				type: "boolean",
				category: "basic",
				width: 8,
				length: null,
				dimension: 0
			}
		
break;
case 64:

			this.$ = {
				type: ST.get_class($$[$0]),
				category: "object",
				width: null,
				length: null,
				dimension: 0
			}
		
break;
case 65:

			var type = new Type(ST.get_class($$[$0-1]), "object", null, null, 0)

			var l = $$[$0].length - 1
			while (l >= 0) {
				type = new Type(type, "array", 4, $$[$0][l].place, $$[$0].length - l)

				l -= 1
			}

			this.$ = type
		
break;
case 66:

			var type = new Type($$[$0-1].type, $$[$0-1].category, $$[$0-1].width, $$[$0-1].length, $$[$0-1].dimension)

			var l = $$[$0].length - 1
			while (l >= 0) {
				type = new Type(type, "array", 4, $$[$0][l].place, $$[$0].length - l)

				l -= 1
			}

			this.$ = type
		
break;
case 67: case 69:

			var method = ST.add_method($$[$0-1].name, new Type("void", "basic", 0, null), $$[$0-1].parameters, $$[$0].scope, main = false)

			this.$ = { code: [], place: null }

			this.$.code.push(
				"function" + ir_sep + method.name
			)
			for (var index in method.parameters) {
				this.$.code.push(
					"pop" + ir_sep + method.parameters[index].name
				)
			}
			this.$.code = this.$.code.concat($$[$0].code)
		
break;
case 68: case 70:

			var method = ST.add_method($$[$0-1].name, $$[$0-2], $$[$0-1].parameters, $$[$0].scope, main = false)

			this.$ = { code: [], place: null }

			this.$.code.push(
				"function" + ir_sep + method.name
			)
			for (var index in method.parameters) {
				this.$.code.push(
					"pop" + ir_sep + method.parameters[index].name
				)
			}
			this.$.code = this.$.code.concat($$[$0].code)
		
break;
case 71:

			this.$ = {
				name: $$[$0-3],
				parameters: $$[$0-1]
			}
		
break;
case 73:

			this.$ = {
				code: [],
				scope: ST.scope_end()
			}

			for (var index in $$[$0-1]) {
				this.$.code = this.$.code.concat($$[$0-1][index].code)
			}
		
break;
case 74:

			this.$ = {
				code: [],
				scope: ST.scope_end()
			}
		
break;
case 75:

			this.$ = ST.scope_start()
		
break;
case 76: case 148:

			this.$ = $$[$0-1]
			this.$.push($$[$0])
		
break;
case 90: case 91:

			this.$ = null
		
break;
case 92:

			this.$ = $$[$0-1]
			this.$.code.push(
				"return" + ir_sep + $$[$0-1].place
			)
		
break;
case 93:

			this.$ = { code: ["return"], place: null }
		
break;
case 97:

			this.$ = { code: [], place: null }

			ST.lookup_variable($$[$0-2].place)

			this.$.place = $$[$0-2].place

			this.$.code = $$[$0].code.concat($$[$0-2].code)
			if ($$[$0-1].third) {
				this.$.code.push(
					$$[$0-1].operator + ir_sep + $$[$0-2].place + ir_sep + $$[$0-2].place + ir_sep + $$[$0].place
				)
			}
			else {
				this.$.code.push(
					$$[$0-1].operator + ir_sep + $$[$0-2].place + ir_sep + $$[$0].place
				)
			}
		
break;
case 101:

			this.$ = { operator: "=", third: false }
		
break;
case 103:

			temp = ST.create_temporary()

			this.$ = { code: [], place: temp }

			this.$.code = $$[$0-2].code.concat($$[$0].code)
			this.$.code.push(
				"+" + ir_sep + temp + ir_sep + $$[$0-2].place + ir_sep + $$[$0].place
			)
		
break;
case 104:

			temp = ST.create_temporary()

			this.$ = { code: [], place: temp }

			this.$.code = $$[$0-2].code.concat($$[$0].code)
			this.$.code.push(
				"-" + ir_sep + temp + ir_sep + $$[$0-2].place + ir_sep + $$[$0].place
			)
		
break;
case 106:

			temp = ST.create_temporary()

			this.$ = { code: [], place: temp }

			this.$.code = $$[$0-2].code.concat($$[$0].code)
			this.$.code.push(
				"*" + ir_sep + temp + ir_sep + $$[$0-2].place + ir_sep + $$[$0].place
			)
		
break;
case 107:

			temp = ST.create_temporary()

			this.$ = { code: [], place: temp }

			this.$.code = $$[$0-2].code.concat($$[$0].code)
			this.$.code.push(
				"/" + ir_sep + temp + ir_sep + $$[$0-2].place + ir_sep + $$[$0].place
			)
		
break;
case 108:

			temp = ST.create_temporary()

			this.$ = { code: [], place: temp }

			this.$.code = $$[$0-2].code.concat($$[$0].code)
			this.$.code.push(
				"%" + ir_sep + temp + ir_sep + $$[$0-2].place + ir_sep + $$[$0].place
			)
		
break;
case 109:

			this.$ = $$[$0]

			this.$.code.push(
				"dec" + ir_sep + this.$.place
			)
		
break;
case 110:

			this.$ = $$[$0]

			this.$.code.push(
				"inc" + ir_sep + this.$.place
			)
		
break;
case 113:

			if ($$[$0-1] == "+") {
				this.$ = $$[$0]
			}
			else {
				temp = ST.create_temporary()

				this.$ = {code: $$[$0].code, place: temp}

				this.$.code.push(
					"*" + ir_sep + this.$.place + ir_sep + $$[$0].place + ir_sep + "-1"
				)
			}
		
break;
case 117:

			this.$ = $$[$0]
			this.$.code.push(
				"not" + ir_sep + this.$.place
			)
		
break;
case 119:
 this.$ = { nt: 'cast_expr', children: [{ t: 'paranthesis_start', l: $$[$0-3] },$$[$0-2],{ t: 'paranthesis_end', l: $$[$0-1] },$$[$0]] } 
break;
case 120: case 121:
 this.$ = { nt: 'postdec_expr', children: [$$[$0-1],{ t: 'op_decrement', l: $$[$0] }] } 
break;
case 122: case 123:
 this.$ = { nt: 'postinc_expr', children: [$$[$0-1],{ t: 'op_increment', l: $$[$0] }] } 
break;
case 128:

			this.$ = { code: [], place: null }

			var method = ST.lookup_method($$[$0-3].place)

			if ($$[$0-1].length != method.num_parameters) {
				throw Error("The method " + method.name + " requires " + method.num_parameters + ", provided" + $$[$0-1].length)
			}

			for (var index in $$[$0-1]) {
				this.$.code = this.$.code.concat($$[$0-1][index].code)
			}
			for (var index in $$[$0-1]) {
				this.$.code.push(
					"param" + ir_sep + $$[$0-1][index].place
				)
			}

			if (method.type != "void") {
				temp = ST.create_temporary()

				this.$.place = temp
				this.$.code.push(
					"call" + ir_sep + $$[$0-3].place + ir_sep + method.num_parameters + ir_sep + temp
				)
			}
			else {
				this.$.code.push(
					"call" + ir_sep + $$[$0-3].place + ir_sep + method.num_parameters
				)
			}
		
break;
case 129:

			this.$ = { code: [], place: null }

			var method = ST.lookup_method($$[$0-2].place)

			if ($$[$0].length != method.num_parameters) {
				throw Error("The method " + method.name + " requires " + method.num_parameters + ", provided " + $$[$0].length)
			}

			for (var index in $$[$0]) {
				this.$.code = this.$.code.concat($$[$0][index].code)
			}
			for (var index in $$[$0]) {
				this.$.code.push(
					"param" + ir_sep + $$[$0][index].place
				)
			}

			if (method.type != "void") {
				temp = ST.create_temporary()

				this.$.place = temp
				this.$.code.push(
					"call" + ir_sep + $$[$0-2].place + ir_sep + method.num_parameters + ir_sep + temp
				)
			}
			else {
				this.$.code.push(
					"call" + ir_sep + $$[$0-2].place + ir_sep + method.num_parameters
				)
			}
		
break;
case 130:
 this.$ = { nt: 'method_invocation', children: [$$[$0-5],{ t: 'field_invoker', l: $$[$0-4] },{ t: 'identifier', l: $$[$0-3] },{ t: 'paranthesis_start', l: $$[$0-2] },$$[$0-1],{ t: 'paranthesis_end', l: $$[$0] }] } 
break;
case 131:
 this.$ = { nt: 'method_invocation', children: [{ t: 'super', l: $$[$0-5] },{ t: 'field_invoker', l: $$[$0-4] },{ t: 'identifier', l: $$[$0-3] },{ t: 'paranthesis_start', l: $$[$0-2] },$$[$0-1],{ t: 'paranthesis_end', l: $$[$0] }] } 
break;
case 132:
 this.$ = { nt: 'method_invocation', children: [$$[$0-4],{ t: 'field_invoker', l: $$[$0-3] },{ t: 'identifier', l: $$[$0-2] },{ t: 'paranthesis_start', l: $$[$0-1] },{ t: 'paranthesis_end', l: $$[$0] }] } 
break;
case 133:
 this.$ = { nt: 'method_invocation', children: [{ t: 'super', l: $$[$0-4] },{ t: 'field_invoker', l: $$[$0-3] },{ t: 'identifier', l: $$[$0-2] },{ t: 'paranthesis_start', l: $$[$0-1] },{ t: 'paranthesis_end', l: $$[$0] }] } 
break;
case 134:
 this.$ = { nt: 'field_access', children: [$$[$0-2],{ t: 'field_invoker', l: $$[$0-1] },{ t: 'identifier', l: $$[$0] }] } 
break;
case 135:
 this.$ = { nt: 'field_access', children: [{ t: 'super', l: $$[$0-2] },{ t: 'field_invoker', l: $$[$0-1] },{ t: 'identifier', l: $$[$0] }] } 
break;
case 136:

			this.$ = { code: [], place: null }

			var temp = ST.create_temporary()

			var array = ST.lookup_variable($$[$0-2].place)
			var type = array.type

			this.$.code.push(
				"=" + ir_sep + temp + ir_sep + "0"
			)

			var offset = 0

			for (var index in $$[$0]) {
				var dim = $$[$0][index]

				if (dim.literal && dim.type != "integer") {
					throw Error("Array indices can only be of type (int)")
				}
				if (type.category != "array") {
					throw Error("Array dimensions do not match")
				}
				
				this.$.code = this.$.code.concat(dim.code)

				this.$.code = this.$.code.concat([
					"*" + ir_sep + temp + ir_sep + temp + ir_sep + type.length,
					"+" + ir_sep + temp + ir_sep + temp + ir_sep + dim.place
				])

				type = type.type
			}

			if (type.category == "array") {
				throw Error("Array dimensions do not match")
			}

			this.$.place = ST.create_temporary()

			this.$.code.push(
				"arrget" + ir_sep + this.$.place + ir_sep + array.name + ir_sep + temp
			)
		
break;
case 138:
 this.$ = { nt: 'primary_no_new_array', children: [{ t: 'this', l: $$[$0] }] } 
break;
case 144:
 this.$ = { nt: 'class_instance_creation_expr', children: [{ t: 'new', l: $$[$0-4] },{ t: 'identifier', l: $$[$0-3] },{ t: 'paranthesis_start', l: $$[$0-2] },$$[$0-1],{ t: 'paranthesis_end', l: $$[$0] }] } 
break;
case 145:
 this.$ = { nt: 'class_instance_creation_expr', children: [{ t: 'new', l: $$[$0-3] },{ t: 'identifier', l: $$[$0-2] },{ t: 'paranthesis_start', l: $$[$0-1] },{ t: 'paranthesis_end', l: $$[$0] }] } 
break;
case 151: case 152:

			this.$ = {
				code: [],
				place: $$[$0]
			}
		
break;
case 153:

			this.$ = {
				code: [],
				place: $$[$0],
				literal: true,
				type: "integer"
			}
		
break;
case 154:

			this.$ = {
				code: [],
				place: $$[$0],
				literal: true,
				type: "float"
			}
		
break;
case 155:

			this.$ = {
				code: [],
				place: $$[$0],
				literal: true,
				type: "boolean"
			}
		
break;
case 156:

			this.$ = {
				code: [],
				place: $$[$0],
				literal: true,
				type: "character"
			}
		
break;
case 157:

			this.$ = {
				code: [],
				place: $$[$0],
				literal: true,
				type: "string"
			}
		
break;
case 158:

			this.$ = {
				code: [],
				place: $$[$0],
				literal: true,
				type: "null"
			}
		
break;
case 159:

			this.$ = "+"
		
break;
case 160:

			this.$ = "-"
		
break;
}
},
table: [{3:1,4:2,5:3,6:[1,4],7:5,8:$V0,10:$V1,11:6,12:8,13:10,15:$V2,16:$V3},{1:[3]},{5:13,6:[1,14],7:15,8:$V0,10:$V1,11:6,12:8,13:10,15:$V2,16:$V3},{6:[1,16],10:$V1,11:17,12:8,13:10,15:$V2,16:$V3},{1:[2,4]},o($V4,[2,5]),o($V5,[2,9]),{9:[1,18]},o($V5,[2,10]),o($V5,[2,11]),{14:19,19:[1,20]},{16:[1,21]},{9:[1,22]},{6:[1,23],10:$V1,11:17,12:8,13:10,15:$V2,16:$V3},{1:[2,2]},o($V4,[2,6]),{1:[2,3]},o($V5,[2,8]),{10:[1,24]},o($V5,[2,12]),{9:$V6,15:$V7,20:25,22:26,23:27,24:29,26:30,27:31,38:33,47:35,48:36,49:37,50:38,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,60:$Vg},{9:[1,47]},{17:48,18:$Vh,19:[2,16]},{1:[2,1]},o($V4,[2,7]),{9:$V6,15:$V7,21:[1,50],22:51,23:27,24:29,26:30,27:31,38:33,47:35,48:36,49:37,50:38,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,60:$Vg},o($Vi,[2,20]),o($Vi,[2,21]),{9:$V6,24:52,38:53,47:35,48:36,49:37,50:38,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,60:[1,54]},{19:$Vj,25:55},o($Vi,[2,24]),o($Vi,[2,25]),{9:$Vk,28:[1,57],59:58,110:59,111:$Vl},{9:$Vm,39:65,40:61,41:63,61:62},{9:$Vn,61:66},{9:[2,52],59:68,110:59,111:$Vl},{9:[2,53]},o($Vo,[2,54]),o($Vo,[2,55]),o($Vo,[2,56]),o($Vo,[2,57]),o($Vo,[2,58]),o($Vo,[2,59]),o($Vo,[2,60]),o($Vo,[2,61]),o($Vo,[2,62]),o($Vo,[2,63]),{17:69,18:$Vh,19:[2,15]},{19:[2,14]},{9:[1,70]},o($V5,[2,18]),o($Vi,[2,19]),{19:$Vj,25:71},{9:$Vm,39:65,40:72,41:63,61:73},{9:$Vn,61:74},o($Vi,[2,23]),{9:$Vp,10:$Vq,19:$Vr,21:[1,77],28:$Vs,31:75,32:76,33:[1,78],35:[1,79],38:81,47:35,48:36,49:37,50:38,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,63:85,65:80,66:82,67:83,69:86,70:87,71:88,72:89,74:$Vt,75:$Vu,76:$Vv,78:95,79:96,81:97,82:98,83:99,103:100,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VD,$VE,{47:35,48:36,49:37,50:38,29:112,37:113,38:114,9:$VF,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf}),{9:[2,65],110:116,111:$Vl},o($VG,[2,149]),{9:$VH,28:$VI,33:$VJ,35:$VK,44:117,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{10:[1,142],36:$VQ},{19:$Vr,62:144,63:145},o($VR,[2,42]),o($VS,$VT,{28:$VU}),o($VR,[2,43],{42:[1,147]}),{19:$Vr,62:148,63:145},{28:$VU},{9:[2,66],110:116,111:$Vl},{19:[2,13]},{19:[2,17]},o($Vi,[2,22]),{10:[1,149],36:$VQ},{19:$Vr,62:150,63:145},{19:$Vr,62:151,63:145},{9:$Vp,10:$Vq,19:$Vr,21:[1,153],28:$Vs,32:152,33:$VJ,35:$VK,38:81,47:35,48:36,49:37,50:38,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,63:85,65:80,66:82,67:83,69:86,70:87,71:88,72:89,74:$Vt,75:$Vu,76:$Vv,78:95,79:96,81:97,82:98,83:99,103:100,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{9:$Vp,10:$Vq,19:$Vr,21:[1,154],28:$Vs,33:$VJ,35:$VK,38:81,47:35,48:36,49:37,50:38,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,63:85,65:155,66:82,67:83,69:86,70:87,71:88,72:89,74:$Vt,75:$Vu,76:$Vv,78:95,79:96,81:97,82:98,83:99,103:100,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vi,[2,30]),o($VV,$VW,{28:[1,156]}),{28:[1,157],105:$VX},o($VY,[2,77]),{9:$VZ,39:65,40:159,41:63},o($VY,[2,79]),o($VY,[2,80]),o($V_,$V$,{59:58,110:59,9:$Vk,111:$Vl}),o($VY,[2,82]),o($VY,[2,83]),o($VY,[2,84]),o($VY,[2,85]),{10:[1,161]},o($VY,[2,87]),o($VY,[2,75],{64:162}),{10:[1,163]},{10:[1,164]},{9:$VH,10:[1,166],28:$VI,33:$VJ,35:$VK,44:165,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VR,[2,96]),{42:[1,168],80:167},{28:$V01,42:$V11,105:$V21,106:$V31},o($VV,$V41,{42:[2,99]}),o($VV,$V51,{42:[2,100]}),{105:$V61},o($VV,[2,137]),{9:$VH,28:$VI,33:$VJ,35:$VK,44:173,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VV,[2,140]),o($VV,[2,143]),o($VV,[2,153]),o($VV,[2,154]),o($VV,[2,155]),o($VV,[2,156]),o($VV,[2,157]),o($VV,[2,158]),{9:[1,174]},{30:[1,175],36:$V71},o($VD,[2,36]),{9:$VZ,39:177},{9:$Vk,59:58,110:59,111:$Vl},o($VG,[2,148]),{112:[1,178]},o($V81,[2,94],{85:[1,179],86:[1,180]}),o($V81,[2,95]),o($V91,[2,102],{88:$Va1,89:$Vb1,90:$Vc1}),o($Vd1,[2,105]),o($Ve1,$Vf1,{28:$V01,42:$V11,105:$V21,106:$V31}),o($Vd1,[2,111]),o($Vd1,[2,112]),{9:$VH,28:$VI,33:$VJ,35:$VK,81:185,82:186,83:187,85:$VL,86:$VM,87:184,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vd1,[2,114]),o($V_,$V$),o($Ve1,[2,126],{105:$V61}),{105:$VX},{9:$VH,28:$VI,33:$VJ,35:$VK,81:185,82:186,83:187,85:$VL,86:$VM,87:188,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{9:$VH,28:$VI,33:$VJ,35:$VK,81:185,82:186,83:187,85:$VL,86:$VM,87:189,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vg1,[2,159]),o($Vg1,[2,160]),o($Vd1,[2,115],{92:[1,191],94:[1,190]}),o($Vd1,[2,116],{92:[1,193],94:[1,192]}),{9:$VH,28:$VI,33:$VJ,35:$VK,81:185,82:186,83:187,85:$VL,86:$VM,87:194,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vd1,[2,118]),o($VV,$VW),{9:$VH,28:$VI,33:$VJ,35:$VK,44:173,47:195,49:37,50:38,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Ve1,[2,124]),o($Ve1,[2,125]),o($Vi,[2,40]),{9:$VZ,39:65,41:196},o($Vi,[2,70]),o($Vi,[2,72]),o($VD,$VE,{47:35,48:36,49:37,50:38,37:113,38:114,29:197,9:$VF,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf}),{9:$VH,19:$Vh1,28:$VI,33:$VJ,35:$VK,43:198,44:199,45:200,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vi,[2,69]),o($Vi,[2,39]),o($Vi,[2,68]),o($Vi,[2,67]),{9:$Vp,10:$Vq,19:$Vr,21:[1,202],28:$Vs,33:$VJ,35:$VK,38:81,47:35,48:36,49:37,50:38,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,63:85,65:155,66:82,67:83,69:86,70:87,71:88,72:89,74:$Vt,75:$Vu,76:$Vv,78:95,79:96,81:97,82:98,83:99,103:100,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vi,[2,29]),o($Vi,[2,28]),o($VY,[2,76]),{9:$VH,28:$VI,30:[1,204],33:$VJ,34:203,35:$VK,44:205,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{9:$VH,28:$VI,30:[1,207],33:$VJ,34:206,35:$VK,44:205,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{9:[1,208]},{10:[1,209],36:$VQ},o($VS,$VT),o($VY,[2,86]),{9:$Vp,10:$Vq,19:$Vr,21:[1,211],28:$Vs,32:210,33:$VJ,35:$VK,38:81,47:35,48:36,49:37,50:38,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,63:85,65:80,66:82,67:83,69:86,70:87,71:88,72:89,74:$Vt,75:$Vu,76:$Vv,78:95,79:96,81:97,82:98,83:99,103:100,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VY,[2,90]),o($VY,[2,91]),{10:[1,212]},o($VY,[2,93]),{9:$VH,28:$VI,33:$VJ,35:$VK,44:213,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vg1,[2,101]),{9:[1,214]},{59:215,110:59,111:$Vl},{9:$VH,28:$VI,30:[1,217],33:$VJ,34:216,35:$VK,44:205,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{9:[1,218]},{30:[1,219]},{28:[1,220]},{19:[2,26]},{9:$VF,37:221,38:114,47:35,48:36,49:37,50:38,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},o($VD,[2,38]),o($VG,[2,150]),{9:$VH,28:$VI,33:$VJ,35:$VK,81:185,82:186,83:187,84:222,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{9:$VH,28:$VI,33:$VJ,35:$VK,81:185,82:186,83:187,84:223,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{9:$VH,28:$VI,33:$VJ,35:$VK,81:185,82:186,83:187,85:$VL,86:$VM,87:224,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{9:$VH,28:$VI,33:$VJ,35:$VK,81:185,82:186,83:187,85:$VL,86:$VM,87:225,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{9:$VH,28:$VI,33:$VJ,35:$VK,81:185,82:186,83:187,85:$VL,86:$VM,87:226,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vd1,[2,113]),o($Ve1,$Vf1,{28:$V01,105:$V21,106:$V31}),o($VV,$V41),o($VV,$V51),o($Vd1,[2,110]),o($Vd1,[2,109]),o($Ve1,[2,122]),o($Ve1,[2,120]),o($Ve1,[2,123]),o($Ve1,[2,121]),o($Vd1,[2,117]),{30:[1,227]},o($VR,[2,41]),{30:[1,228],36:$V71},o($VR,[2,44]),o($Vi1,[2,46]),o($Vi1,[2,47]),{9:$VH,19:$Vh1,28:$VI,33:$VJ,35:$VK,43:230,44:199,45:200,46:229,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vi,[2,27]),{30:[1,231],36:$Vj1},o($VY,[2,33]),o($VD,[2,146]),{30:[1,233],36:$Vj1},o($VY,[2,34]),o($Vk1,[2,135],{28:[1,234]}),o($VY,[2,78]),{9:$Vp,10:$Vq,19:$Vr,21:[1,235],28:$Vs,33:$VJ,35:$VK,38:81,47:35,48:36,49:37,50:38,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,63:85,65:155,66:82,67:83,69:86,70:87,71:88,72:89,74:$Vt,75:$Vu,76:$Vv,78:95,79:96,81:97,82:98,83:99,103:100,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vl1,[2,74]),o($VY,[2,92]),o($V81,[2,97]),o($V_,[2,152]),o($Vk1,[2,136],{110:116,111:$Vl}),{30:[1,236],36:$Vj1},o($VV,[2,129]),o($Vk1,[2,134],{28:[1,237]}),o($VV,[2,139]),{9:$VH,28:$VI,30:[1,239],33:$VJ,34:238,35:$VK,44:205,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VD,[2,35]),o($V91,[2,103],{88:$Va1,89:$Vb1,90:$Vc1}),o($V91,[2,104],{88:$Va1,89:$Vb1,90:$Vc1}),o($Vd1,[2,106]),o($Vd1,[2,107]),o($Vd1,[2,108]),{9:$VH,28:$VI,33:$VJ,35:$VK,81:185,82:186,83:187,85:$VL,86:$VM,87:240,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{19:[2,71]},{21:[1,242],36:[1,241]},o($Vm1,[2,51]),o($VY,[2,31]),{9:$VH,28:$VI,33:$VJ,35:$VK,44:243,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VY,[2,32]),{9:$VH,28:$VI,30:[1,245],33:$VJ,34:244,35:$VK,44:205,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vl1,[2,73]),o($VV,[2,128]),{9:$VH,28:$VI,30:[1,247],33:$VJ,34:246,35:$VK,44:205,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:[1,248],36:$Vj1},o($VV,[2,145]),o($Vd1,[2,119]),{9:$VH,19:$Vh1,21:[1,249],28:$VI,33:$VJ,35:$VK,43:250,44:199,45:200,77:118,78:119,79:96,81:122,82:98,83:99,84:120,85:$VL,86:$VM,87:121,91:124,92:$VN,93:123,94:$VO,95:125,96:126,97:134,98:135,99:$VP,100:137,101:141,102:140,103:128,104:104,107:101,108:103,109:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vi1,[2,49]),o($VD,[2,147]),{30:[1,251],36:$Vj1},o($VV,[2,133]),{30:[1,252],36:$Vj1},o($VV,[2,132]),o($VV,[2,144]),o($Vi1,[2,48]),o($Vm1,[2,50]),o($VV,[2,131]),o($VV,[2,130])],
defaultActions: {4:[2,4],14:[2,2],16:[2,3],23:[2,1],36:[2,53],48:[2,14],69:[2,13],70:[2,17],175:[2,26],228:[2,71]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var utils = {
		init: function(obj) {
			var self = { code: [], place: null }

			for (var var_index in obj.var_declarators) {
				variable = obj.var_declarators[var_index]
				
				ST.add_variable(variable.identifier, obj.type);

				if (obj.type.category == "array") {
					
					if (variable.init != null) {
						var inits = variable.init
						var type = obj.type

						var length = 1

						if (type.dimension == 0 || type.length != inits.length) {
							throw Error("Array dimensions do not match");
						}

						while (type.dimension != 0) {
							length *= type.length

							type = type.type
							
							var inits_serial = []
							for (var index in inits) {
								if (type.length != inits[index].length) {
									throw Error("Array dimensions do not match");
								}

								inits_serial = inits_serial.concat(inits[index])
							}
							inits = inits_serial
						}

						if (inits[0].length) {
							throw Error("Array dimensions do not match");
						}

						self.code.push(
							"decr" + ir_sep + variable.identifier + ir_sep + "array" + ir_sep + type.get_type() + ir_sep + length + ir_sep
						)

						for (var index in inits) {
							self.code = self.code.concat(inits[index].code)
							self.code.push(
								"arrset" + ir_sep + variable.identifier + ir_sep + index + ir_sep + inits[index].place
							)
						}
					}
					else {
						var length = 1;
						var type = obj.type;

						while (type.dimension != 0) {
							length *= type.length

							type = type.type
						}

						self.code.push(
							"decr" + ir_sep + variable.identifier + ir_sep + "array" + ir_sep + type.get_type() + ir_sep + length + ir_sep
						)
					}
				}
				else {
					self.code.push(
						"decr" + ir_sep + variable.identifier + ir_sep + obj.type.get_type()
					)

					if (variable.init != null) {
						self.code = self.code.concat(variable.init.code)
						self.code.push(
							"=" + ir_sep + variable.identifier + ir_sep + variable.init.place
						)
					}
				}
			}

			return self
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState('BLOCKCOMMENT');
break;
case 1:this.popState();
break;
case 2:/* SKIP BLOCKCOMMENTS */
break;
case 3:this.pushState('COMMENT');
break;
case 4:/* SKIP COMMENTS */
break;
case 5:this.popState();
break;
case 6:/* SKIP WHITESPACES */
break;
case 7:return 51;
break;
case 8:return 74;
break;
case 9:return 52;
break;
case 10:return 'case';
break;
case 11:return 56;
break;
case 12:return 16;
break;
case 13:return 'const';
break;
case 14:return 75;
break;
case 15:return 'default';
break;
case 16:return 'do';
break;
case 17:return 58;
break;
case 18:return 'else';
break;
case 19:return 18;
break;
case 20:return 57;
break;
case 21:return 'for';
break;
case 22:return 'if';
break;
case 23:return 8;
break;
case 24:return 'instanceof';
break;
case 25:return 54;
break;
case 26:return 55;
break;
case 27:return 109;
break;
case 28:return 15;
break;
case 29:return 76;
break;
case 30:return 53;
break;
case 31:return 'static';
break;
case 32:return 35;
break;
case 33:return 'switch';
break;
case 34:return 33;
break;
case 35:return 60;
break;
case 36:return 'while';
break;
case 37:return 94;
break;
case 38:return 92;
break;
case 39:return 'op_addAssign';
break;
case 40:return 'op_subAssign';
break;
case 41:return 'op_mulAssign';
break;
case 42:return 'op_divAssign';
break;
case 43:return 'op_modAssign';
break;
case 44:return 'op_andAssign';
break;
case 45:return 'op_orAssign';
break;
case 46:return 'op_xorAssign';
break;
case 47:return 'op_notequalCompare';
break;
case 48:return 'op_equalCompare';
break;
case 49:return 'op_LshiftEqual';
break;
case 50:return 'op_RshiftEqual';
break;
case 51:return 'op_greaterEqual';
break;
case 52:return 'op_lessEqual';
break;
case 53:return 'op_Lshift';
break;
case 54:return 'op_Rshift';
break;
case 55:return 85;
break;
case 56:return 86;
break;
case 57:return 88;
break;
case 58:return 89;
break;
case 59:return 90;
break;
case 60:return 'op_greater';
break;
case 61:return 'op_less';
break;
case 62:return 42;
break;
case 63:return 'op_andand';
break;
case 64:return 'op_oror';
break;
case 65:return 'op_and';
break;
case 66:return 'op_or';
break;
case 67:return 99;
break;
case 68:return 'op_xor';
break;
case 69:return 106;
break;
case 70:return 114;
break;
case 71:return 113;
break;
case 72:return 115;
break;
case 73:return 115;
break;
case 74:return 118;
break;
case 75:return 116;
break;
case 76:return 117;
break;
case 77:return 9;
break;
case 78:return 10;
break;
case 79:return 105;
break;
case 80:return 36;
break;
case 81:return 28;
break;
case 82:return 30;
break;
case 83:return 111;
break;
case 84:return 112;
break;
case 85:return 19;
break;
case 86:return 21;
break;
case 87:return 6;
break;
}
},
rules: [/^(?:\/\*)/,/^(?:\*\/)/,/^(?:(\n|\r|.))/,/^(?:\/\/)/,/^(?:(.))/,/^(?:(\n|\r))/,/^(?:\s+)/,/^(?:boolean\b)/,/^(?:break\b)/,/^(?:byte\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:class\b)/,/^(?:const\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:extends\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:import\b)/,/^(?:instanceof\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:new\b)/,/^(?:public\b)/,/^(?:return\b)/,/^(?:short\b)/,/^(?:static\b)/,/^(?:super\b)/,/^(?:switch\b)/,/^(?:this\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:[+][+])/,/^(?:[-][-])/,/^(?:[+][=])/,/^(?:[-][=])/,/^(?:[*][=])/,/^(?:[\/][=])/,/^(?:[%][=])/,/^(?:[&][=])/,/^(?:[|][=])/,/^(?:[\^][=])/,/^(?:[!][=])/,/^(?:[=][=])/,/^(?:[<][<][=])/,/^(?:[>][>][=])/,/^(?:[>][=])/,/^(?:[<][=])/,/^(?:[<][<])/,/^(?:[>][>])/,/^(?:[+])/,/^(?:[-])/,/^(?:[*])/,/^(?:[\/])/,/^(?:[%])/,/^(?:[>])/,/^(?:[<])/,/^(?:[=])/,/^(?:[&][&])/,/^(?:[|][|])/,/^(?:[&])/,/^(?:[|])/,/^(?:[!])/,/^(?:[\^])/,/^(?:[:])/,/^(?:[0-9]+\.[0-9]*)/,/^(?:[0-9]+)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:'(\\[^\n\r]|[^\\\'\n\r])')/,/^(?:"(\\[^\n\r]|[^\\\'\n\r])*")/,/^(?:([a-z]|[A-Z]|[$]|[_])(\w)*)/,/^(?:[;])/,/^(?:[.])/,/^(?:[,])/,/^(?:[(])/,/^(?:[)])/,/^(?:[\[])/,/^(?:[\]])/,/^(?:[{])/,/^(?:[}])/,/^(?:$)/],
conditions: {"COMMENT":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true},"BLOCKCOMMENT":{"rules":[0,1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true},"INITIAL":{"rules":[0,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = index;
exports.Parser = index.Parser;
exports.parse = function () { return index.parse.apply(index, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}