				\\
				########################## JAVA SYNTAX SPECIFICATION ###########################
				\\
				\\
				----------------------------------- PROGRAMS -----------------------------------
				\\
				<compilation unit>							&	$\colon\colon=$	&	<import declarations>? <type declarations>?
				\\
				--------------------------------------------------------------------------------
				\\
				\\
				\\
				--------------------------------- DECLARATIONS ---------------------------------
				\\
				<import declarations>						&	$\colon\colon=$	&	<import declaration> | <import declarations> <import declaration>
				\\
				<import declaration>						&	$\colon\colon=$	&	<single type import declaration> | <type import on demand declaration>
				\\
				<single type import declaration>			&	$\colon\colon=$	&	import <type name> ;
				\\
				<type declarations>							&	$\colon\colon=$	&	<type declaration> | <type declarations> <type declaration>
				\\
				<type declaration>							&	$\colon\colon=$	&	<class declaration> | ;
				\\
				<class declaration>							&	$\colon\colon=$	&	<class modifiers>? class <identifier> <super>? <class body>
				\\
				<class modifiers>							&	$\colon\colon=$	&	<class modifier> | <class modifiers> <class modifier>
				\\
				<class modifier>							&	$\colon\colon=$	&	public
				\\
				<super>										&	$\colon\colon=$	&	extends <class type>
				\\
				<class body>								&	$\colon\colon=$	&	{ <class body declarations>? }
				\\
				<class body declarations>					&	$\colon\colon=$	&	<class body declaration> | <class body declarations> <class body declaration>
				\\
				<class body declaration>					&	$\colon\colon=$	&	<class member declaration> | <static initializer> | <constructor declaration>
				\\
				<class member declaration>					&	$\colon\colon=$	&	<field declaration> | <method declaration>
				\\
				<static initializer>						&	$\colon\colon=$	&	static <block>
				\\
				<constructor declaration>					&	$\colon\colon=$	&	<constructor modifiers>? <constructor declarator> <constructor body>
				\\
				<constructor modifiers>						&	$\colon\colon=$	&	<constructor modifier> | <constructor modifiers> <constructor modifier>
				\\
				<constructor modifier>						&	$\colon\colon=$	&	public
				\\
				<constructor declarator>					&	$\colon\colon=$	&	<type name> ( <formal parameter list>? )
				\\
				<formal parameter list>						&	$\colon\colon=$	&	<formal parameter> | <formal parameter list> , <formal parameter>
				\\
				<formal parameter>							&	$\colon\colon=$	&	<type> <variable declarator id>
				\\
				<constructor body>							&	$\colon\colon=$	&	{ <explicit constructor invocation>? <block statements>? }
				\\
				<explicit constructor invocation>			&	$\colon\colon=$	&	this ( <argument list>? ) | super ( <argument list>? )
				\\
				<field declaration>							&	$\colon\colon=$	&	<field modifiers>? <type> <variable declarators> ;
				\\
				<field modifiers>							&	$\colon\colon=$	&	<field modifier> | <field modifiers> <field modifier>
				\\
				<field modifier>							&	$\colon\colon=$	&	public | static
				\\
				<variable declarators>						&	$\colon\colon=$	&	<variable declarator> | <variable declarators> , <variable declarator>
				\\
				<variable declarator>						&	$\colon\colon=$	&	<variable declarator id> | <variable declarator id> = <variable initializer>
				\\
				<variable declarator id>					&	$\colon\colon=$	&	<identifier> | <variable declarator id> [ ]
				\\
				<variable initializer>						&	$\colon\colon=$	&	<expression> | <array initializer>
				\\
				<method declaration>						&	$\colon\colon=$	&	<method header> <method body>
				\\
				<method header>								&	$\colon\colon=$	&	<method modifiers>? <result type> <method declarator>
				\\
				<result type>								&	$\colon\colon=$	&	<type> | void
				\\
				<method modifiers>							&	$\colon\colon=$	&	<method modifier> | <method modifiers> <method modifier>
				\\
				<method modifier>							&	$\colon\colon=$	&	public | static
				\\
				<method declarator>							&	$\colon\colon=$	&	<identifier> ( <formal parameter list>? )
				\\
				<method body>								&	$\colon\colon=$	&	<block> | ;
				\\
				<constant declaration>						&	$\colon\colon=$	&	<constant modifiers> <type> <variable declarator>
				\\
				<constant modifiers>						&	$\colon\colon=$	&	public | static
				\\
				<array initializer>							&	$\colon\colon=$	&	{ <variable initializers>? , ? }
				\\
				<variable initializers>						&	$\colon\colon=$	&	<variable initializer> | <variable initializers> , <variable initializer>
				\\
				<variable initializer>						&	$\colon\colon=$	&	<expression> | <array initializer>
				\\
				--------------------------------------------------------------------------------
				\\
				\\
				\\
				------------------------------------ TYPES -------------------------------------
				\\
				<type>										&	$\colon\colon=$	&	<primitive type> | <reference type>
				\\
				<primitive type>							&	$\colon\colon=$	&	<numeric type> | boolean
				\\
				<numeric type>								&	$\colon\colon=$	&	<integral type> | <floating-point type>
				\\
				<integral type>								&	$\colon\colon=$	&	byte | short | int | long | char
				\\
				<floating-point type>						&	$\colon\colon=$	&	float | double
				\\
				<reference type>							&	$\colon\colon=$	&	<class or interface type> | <array type>
				\\
				<class or interface type>					&	$\colon\colon=$	&	<class type> | <interface type>
				\\
				<class type>								&	$\colon\colon=$	&	<type name>
				\\
				<interface type>							&	$\colon\colon=$	&	<type name>
				\\
				<array type>								&	$\colon\colon=$	&	<type> [ ]
				\\
				--------------------------------------------------------------------------------
				\\
				\\
				\\
				----------------------------- BLOCKS AND COMMANDS ------------------------------
				\\
				<block>										&	$\colon\colon=$	&	{ <block statements>? }
				\\
				<block statements>							&	$\colon\colon=$	&	<block statement> | <block statements> <block statement>
				\\
				<block statement>							&	$\colon\colon=$	&	<local variable declaration statement> | <statement>
				\\
				<local variable declaration statement>		&	$\colon\colon=$	&	<local variable declaration> ;
				\\
				<local variable declaration>				&	$\colon\colon=$	&	<type> <variable declarators>
				\\
				<statement>									&	$\colon\colon=$	&	<statement without trailing substatement> | <if then statement> | <if then else statement> | <while statement> | <for statement>
				\\
				<statement no short if>						&	$\colon\colon=$	&	<statement without trailing substatement> | <if then else statement no short if> | <while statement no short if> | <for statement no short if>
				\\
				<statement without trailing substatement>	&	$\colon\colon=$	&	<block> | <empty statement> | <expression statement> | <switch statement> | <do statement> | <break statement> | <continue statement> | <return statement>
				\\
				<empty statement>							&	$\colon\colon=$	&	;
				\\
				<expression statement>						&	$\colon\colon=$	&	<statement expression> ;
				\\
				<statement expression>						&	$\colon\colon=$	&	<assignment> | <preincrement expression> | <postincrement expression> | <predecrement expression> | <postdecrement expression> | <method invocation> | <class instance creation expression>
				\\
				<if then statement>							&	$\colon\colon=$	&	if ( <expression> ) <statement>
				\\
				<if then else statement>					&	$\colon\colon=$	&	if ( <expression> ) <statement no short if> else <statement>
				\\
				<if then else statement no short if>		&	$\colon\colon=$	&	if ( <expression> ) <statement no short if> else <statement no short if>
				\\
				<switch statement>							&	$\colon\colon=$	&	switch ( <expression> ) <switch block>
				\\
				<switch block>								&	$\colon\colon=$	&	{ <switch block statement groups>? <switch labels>? }
				\\
				<switch block statement groups>				&	$\colon\colon=$	&	<switch block statement group> | <switch block statement groups> <switch block statement group>
				\\
				<switch block statement group>				&	$\colon\colon=$	&	<switch labels> <block statements>
				\\
				<switch labels>								&	$\colon\colon=$	&	<switch label> | <switch labels> <switch label>
				\\
				<switch label>								&	$\colon\colon=$	&	case <constant expression> : | default :
				\\
				<while statement>							&	$\colon\colon=$	&	while ( <expression> ) <statement>
				\\
				<while statement no short if>				&	$\colon\colon=$	&	while ( <expression> ) <statement no short if>
				\\
				<do statement>								&	$\colon\colon=$	&	do <statement> while ( <expression> ) ;
				\\
				<for statement>								&	$\colon\colon=$	&	for ( <for init>? ; <expression>? ; <for update>? ) <statement>
				\\
				<for statement no short if>					&	$\colon\colon=$	&	for ( <for init>? ; <expression>? ; <for update>? ) <statement no short if>
				\\
				<for init>									&	$\colon\colon=$	&	<statement expression list> | <local variable declaration>
				\\
				<for update>								&	$\colon\colon=$	&	<statement expression list>
				\\
				<statement expression list>					&	$\colon\colon=$	&	<statement expression> | <statement expression list> , <statement expression>
				\\
				<break statement>							&	$\colon\colon=$	&	break ;
				\\
				<continue statement>						&	$\colon\colon=$	&	continue ;
				\\
				<return statement>							&	$\colon\colon=$	&	return <expression>? ;
				\\
				--------------------------------------------------------------------------------
				\\
				\\
				\\
				--------------------------------- EXPRESSIONS ----------------------------------
				\\
				<constant expression>						&	$\colon\colon=$	&	<expression>
				\\
				<expression>								&	$\colon\colon=$	&	<assignment expression>
				\\
				<assignment expression>						&	$\colon\colon=$	&	<conditional expression> | <assignment>
				\\
				<assignment>								&	$\colon\colon=$	&	<left hand side> <assignment operator> <assignment expression>
				\\
				<left hand side>							&	$\colon\colon=$	&	<expression name> | <field access> | <array access>
				\\
				<assignment operator>						&	$\colon\colon=$	&	= | *= | /= | %= | += | -= | <<= | >>= | &= | ^= | |=
				\\
				<conditional expression>					&	$\colon\colon=$	&	<conditional or expression> | <conditional or expression> ? <expression> : <conditional expression>
				\\
				<conditional or expression>					&	$\colon\colon=$	&	<conditional and expression> | <conditional or expression> || <conditional and expression>
				\\
				<conditional and expression>				&	$\colon\colon=$	&	<inclusive or expression> | <conditional and expression> && <inclusive or expression>
				\\
				<inclusive or expression>					&	$\colon\colon=$	&	<exclusive or expression> | <inclusive or expression> #| <exclusive or expression>
				\\
				<exclusive or expression>					&	$\colon\colon=$	&	<and expression> | <exclusive or expression> ^ <and expression>
				\\
				<and expression>							&	$\colon\colon=$	&	<equality expression> | <and expression> & <equality expression>
				\\
				<equality expression>						&	$\colon\colon=$	&	<relational expression> | <equality expression> == <relational expression> | <equality expression> != <relational expression>
				\\
				<relational expression>						&	$\colon\colon=$	&	<shift expression> | <relational expression> < <shift expression> | <relational expression> > <shift expression> | <relational expression> <= <shift expression> | <relational expression> >= <shift expression> | <relational expression> instanceof <reference type>
				\\
				<shift expression>							&	$\colon\colon=$	&	<additive expression> | <shift expression> << <additive expression> | <shift expression> >> <additive expression>
				\\
				<additive expression>						&	$\colon\colon=$	&	<multiplicative expression> | <additive expression> + <multiplicative expression> | <additive expression> - <multiplicative expression>
				\\
				<multiplicative expression>					&	$\colon\colon=$	&	<unary expression> | <multiplicative expression> * <unary expression> | <multiplicative expression> / <unary expression> | <multiplicative expression> % <unary expression>
				\\
				<cast expression>							&	$\colon\colon=$	&	( <primitive type> ) <unary expression> | ( <reference type> ) <unary expression not plus minus>
				\\
				<unary expression>							&	$\colon\colon=$	&	<preincrement expression> | <predecrement expression> | + <unary expression> | - <unary expression> | <unary expression not plus minus>
				\\
				<predecrement expression>					&	$\colon\colon=$	&	-- <unary expression>
				\\
				<preincrement expression>					&	$\colon\colon=$	&	++ <unary expression>
				\\
				<unary expression not plus minus>			&	$\colon\colon=$	&	<postfix expression> | ~ <unary expression> | ! <unary expression> | <cast expression>
				\\
				<postdecrement expression>					&	$\colon\colon=$	&	<postfix expression> --
				\\
				<postincrement expression>					&	$\colon\colon=$	&	<postfix expression> ++
				\\
				<postfix expression>						&	$\colon\colon=$	&	<primary> | <expression name> | <postincrement expression> | <postdecrement expression>
				\\
				<method invocation>							&	$\colon\colon=$	&	<method name> ( <argument list>? ) | <primary> . <identifier> ( <argument list>? ) | super . <identifier> ( <argument list>? )
				\\
				<field access>								&	$\colon\colon=$	&	<primary> . <identifier> | super . <identifier>
				\\
				<primary>									&	$\colon\colon=$	&	<primary no new array> | <array creation expression>
				\\
				<primary no new array>						&	$\colon\colon=$	&	<literal> | this | ( <expression> ) | <class instance creation expression> | <field access> | <method invocation> | <array access>
				\\
				<class instance creation expression>		&	$\colon\colon=$	&	new <class type> ( <argument list>? )
				\\
				<argument list>								&	$\colon\colon=$	&	<expression> | <argument list> , <expression>
				\\
				<array creation expression>					&	$\colon\colon=$	&	new <primitive type> <dim exprs> <dims>? | new <class or interface type> <dim exprs> <dims>?
				\\
				<dim exprs>									&	$\colon\colon=$	&	<dim expr> | <dim exprs> <dim expr>
				\\
				<dim expr>									&	$\colon\colon=$	&	[ <expression> ]
				\\
				<dims>										&	$\colon\colon=$	&	[ ] | <dims> [ ]
				\\
				<array access>								&	$\colon\colon=$	&	<expression name> [ <expression> ] | <primary no new array> [ <expression>]
				\\
				--------------------------------------------------------------------------------
				\\
				\\
				\\
				------------------------------------ TOKENS ------------------------------------
				\\
				\\
				<type name>									&	$\colon\colon=$	&	<identifier>
				\\
				<expression name>							&	$\colon\colon=$	&	<identifier> | <ambiguous name> . <identifier>
				\\
				<method name>								&	$\colon\colon=$	&	<identifier> | <ambiguous name>. <identifier>
				\\
				<ambiguous name>							&	$\colon\colon=$	&	<identifier> | <ambiguous name>. <identifier>
				\\
				<literal>									&	$\colon\colon=$	&	<integer literal> | <floating-point literal> | <boolean literal> | <character literal> | <string literal> | <null literal>
				\\
				<integer literal>							&	$\colon\colon=$	&	0 | <non zero digit> <digits>?
				\\
				<digits>									&	$\colon\colon=$	&	<digit> | <digits> <digit>
				\\
				<digit>										&	$\colon\colon=$	&	0 | <non zero digit>
				\\
				<non zero digit>							&	$\colon\colon=$	&	1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
				\\
				<floating-point literal>					&	$\colon\colon=$	&	<digits> . <digits>?
				\\
				<signed integer>							&	$\colon\colon=$	&	<sign>? <digits>
				\\
				<sign>										&	$\colon\colon=$	&	+ | -
				\\
				<boolean literal>							&	$\colon\colon=$	&	true | false
				\\
				<character literal>							&	$\colon\colon=$	&	' <single character> ' | ' <escape sequence> '
				\\
				<single character>							&	$\colon\colon=$	&	<input character> except ' and \
				\\
				<string literal>							&	$\colon\colon=$	&	" <string characters>? "
				\\
				<string characters>							&	$\colon\colon=$	&	<string character> | <string characters> <string character>
				\\
				<string character>							&	$\colon\colon=$	&	<input character> except " and \ | <escape character>
				\\
				<null literal>								&	$\colon\colon=$	&	null
				\\
				<keyword>									&	$\colon\colon=$	&	boolean | break | byte | case | char | class | const | continue | default | do | double | else | extends | float | for | if | import | instanceof | int | long | new | return | short | static | super | switch | this | void | while
				\\
				--------------------------------------------------------------------------------
